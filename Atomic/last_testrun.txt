{Atomic_AST.AST+Program}
  body: ...
    {Atomic_AST.AST+Line}
      line: 2
      type: "line"
    {Atomic_AST.AST+Line}
      line: 3
      type: "line"
    {Atomic_AST.AST+Line}
      line: 11
      type: "line"
    {Atomic_AST.AST+Line}
      line: 15
      type: "line"
    {Atomic_AST.AST+Line}
      line: 19
      type: "line"
    {Atomic_AST.AST+FuncDeclarartion}
      name: "question"
      parameters: ...
        "message"
      body: ...
        {Atomic_AST.AST+Line}
          line: 4
          type: "line"
        {Atomic_AST.AST+Line}
          line: 5
          type: "line"
        {Atomic_AST.AST+VarDeclaration}
          Id: "results"
          value: { }
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+Identifier}
                  symbol: "message"
                  locked: False
                  type: "Identifier"
                {Atomic_AST.AST+StringLiteral}
                  value: " Y/n: "
                  type: "StringLiteral"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "prompt"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
          locked: False
          type: "VarDeclaration"
        {Atomic_AST.AST+Line}
          line: 6
          type: "line"
        {Atomic_AST.AST+Line}
          line: 7
          type: "line"
        {Atomic_AST.AST+ifElseBlock}
          mainIfStmt: { }
            {Atomic_AST.AST+ifStmt}
              condition: { }
                {Atomic_AST.AST+BinaryExpression}
                  left: { }
                    {Atomic_AST.AST+CallExpr}
                      args: ...
                        {Atomic_AST.AST+Identifier}
                          symbol: "results"
                          locked: False
                          type: "Identifier"
                      caller: { }
                        {Atomic_AST.AST+Identifier}
                          symbol: "toLower"
                          locked: False
                          type: "Identifier"
                      type: "CallExpr"
                  right: { }
                    {Atomic_AST.AST+StringLiteral}
                      value: "y"
                      type: "StringLiteral"
                  Operator: "="
                  type: "BinaryExpr"
              body: ...
                {Atomic_AST.AST+Line}
                  line: 8
                  type: "line"
                {Atomic_AST.AST+CallExpr}
                  args: ...
                    {Atomic_AST.AST+StringLiteral}
                      value: "work1"
                      type: "StringLiteral"
                  caller: { }
                    {Atomic_AST.AST+Identifier}
                      symbol: "write"
                      locked: False
                      type: "Identifier"
                  type: "CallExpr"
                {Atomic_AST.AST+Line}
                  line: 9
                  type: "line"
                {Atomic_AST.AST+ReturnStmt}
                  value: { }
                    {Atomic_AST.AST+Bool}
                      value: True
                      type: "Bool"
                  type: "ReturnStmt"
                {Atomic_AST.AST+Line}
                  line: 10
                  type: "line"
              type: "ifStmt"
          elseStmts: ...
            {Atomic_AST.AST+elseStmt}
              elseIfStmt: { }
                {Atomic_AST.AST+ifStmt}
                  condition: { }
                    {Atomic_AST.AST+BinaryExpression}
                      left: { }
                        {Atomic_AST.AST+CallExpr}
                          args: ...
                            {Atomic_AST.AST+Identifier}
                              symbol: "results"
                              locked: False
                              type: "Identifier"
                          caller: { }
                            {Atomic_AST.AST+Identifier}
                              symbol: "toLower"
                              locked: False
                              type: "Identifier"
                          type: "CallExpr"
                      right: { }
                        {Atomic_AST.AST+StringLiteral}
                          value: "n"
                          type: "StringLiteral"
                      Operator: "="
                      type: "BinaryExpr"
                  body: ...
                    {Atomic_AST.AST+Line}
                      line: 12
                      type: "line"
                    {Atomic_AST.AST+CallExpr}
                      args: ...
                        {Atomic_AST.AST+StringLiteral}
                          value: "wor2k"
                          type: "StringLiteral"
                      caller: { }
                        {Atomic_AST.AST+Identifier}
                          symbol: "write"
                          locked: False
                          type: "Identifier"
                      type: "CallExpr"
                    {Atomic_AST.AST+Line}
                      line: 13
                      type: "line"
                    {Atomic_AST.AST+ReturnStmt}
                      value: { }
                        {Atomic_AST.AST+Bool}
                          value: False
                          type: "Bool"
                      type: "ReturnStmt"
                    {Atomic_AST.AST+Line}
                      line: 14
                      type: "line"
                  type: "ifStmt"
              body: ...
              type: "elseStmt"
            {Atomic_AST.AST+elseStmt}
              elseIfStmt: { }
                null
              body: ...
                {Atomic_AST.AST+Line}
                  line: 16
                  type: "line"
                {Atomic_AST.AST+CallExpr}
                  args: ...
                    {Atomic_AST.AST+StringLiteral}
                      value: "work3"
                      type: "StringLiteral"
                  caller: { }
                    {Atomic_AST.AST+Identifier}
                      symbol: "write"
                      locked: False
                      type: "Identifier"
                  type: "CallExpr"
                {Atomic_AST.AST+Line}
                  line: 17
                  type: "line"
                {Atomic_AST.AST+ReturnStmt}
                  value: { }
                    {Atomic_AST.AST+Bool}
                      value: True
                      type: "Bool"
                  type: "ReturnStmt"
                {Atomic_AST.AST+Line}
                  line: 18
                  type: "line"
              type: "elseStmt"
          type: "ifElseBlock"
      type: "FuncDeclarartion"
    {Atomic_AST.AST+Line}
      line: 20
      type: "line"
    {Atomic_AST.AST+Line}
      line: 21
      type: "line"
    {Atomic_AST.AST+VarDeclaration}
      Id: "isRobot"
      value: { }
        {Atomic_AST.AST+CallExpr}
          args: ...
            {Atomic_AST.AST+StringLiteral}
              value: "are you a robot?"
              type: "StringLiteral"
          caller: { }
            {Atomic_AST.AST+Identifier}
              symbol: "question"
              locked: False
              type: "Identifier"
          type: "CallExpr"
      locked: False
      type: "VarDeclaration"
    {Atomic_AST.AST+Line}
      line: 22
      type: "line"
    {Atomic_AST.AST+CallExpr}
      args: ...
        {Atomic_AST.AST+Identifier}
          symbol: "isRobot"
          locked: False
          type: "Identifier"
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "write"
          locked: False
          type: "Identifier"
      type: "CallExpr"
    {Atomic_AST.AST+Line}
      line: 23
      type: "line"
    {Atomic_AST.AST+Line}
      line: 26
      type: "line"
    {Atomic_AST.AST+Line}
      line: 27
      type: "line"
    {Atomic_AST.AST+Line}
      line: 30
      type: "line"
    {Atomic_AST.AST+ifElseBlock}
      mainIfStmt: { }
        {Atomic_AST.AST+ifStmt}
          condition: { }
            {Atomic_AST.AST+Identifier}
              symbol: "isRobot"
              locked: False
              type: "Identifier"
          body: ...
            {Atomic_AST.AST+Line}
              line: 24
              type: "line"
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+StringLiteral}
                  value: "you are a robot ):"
                  type: "StringLiteral"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "write"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
            {Atomic_AST.AST+Line}
              line: 25
              type: "line"
          type: "ifStmt"
      elseStmts: ...
        {Atomic_AST.AST+elseStmt}
          elseIfStmt: { }
            {Atomic_AST.AST+ifStmt}
              condition: { }
                {Atomic_AST.AST+BinaryExpression}
                  left: { }
                    {Atomic_AST.AST+Identifier}
                      symbol: "isRobot"
                      locked: False
                      type: "Identifier"
                  right: { }
                    {Atomic_AST.AST+Bool}
                      value: False
                      type: "Bool"
                  Operator: "="
                  type: "BinaryExpr"
              body: ...
                {Atomic_AST.AST+Line}
                  line: 28
                  type: "line"
                {Atomic_AST.AST+CallExpr}
                  args: ...
                    {Atomic_AST.AST+StringLiteral}
                      value: "Yay you are not a robot :)"
                      type: "StringLiteral"
                  caller: { }
                    {Atomic_AST.AST+Identifier}
                      symbol: "write"
                      locked: False
                      type: "Identifier"
                  type: "CallExpr"
                {Atomic_AST.AST+Line}
                  line: 29
                  type: "line"
              type: "ifStmt"
          body: ...
          type: "elseStmt"
      type: "ifElseBlock"
  type: "Program"

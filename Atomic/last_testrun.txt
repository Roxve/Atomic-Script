{Atomic_AST.AST+Program}
  body: ...
    {Atomic_AST.AST+CallExpr}
      args: ...
        {Atomic_AST.AST+CompareExpr}
          left: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+BinaryExpression}
                  left: { }
                    {Atomic_AST.AST+NumericLiteral}
                      value: 1
                      type: "NumericLiteral"
                  right: { }
                    {Atomic_AST.AST+NumericLiteral}
                      value: 6
                      type: "NumericLiteral"
                  Operator: "+"
                  type: "BinaryExpr"
              right: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 6
                  type: "NumericLiteral"
              Operator: "*"
              type: "BinaryExpr"
          right: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 1
                  type: "NumericLiteral"
              right: { }
                {Atomic_AST.AST+BinaryExpression}
                  left: { }
                    {Atomic_AST.AST+NumericLiteral}
                      value: 6
                      type: "NumericLiteral"
                  right: { }
                    {Atomic_AST.AST+NumericLiteral}
                      value: 6
                      type: "NumericLiteral"
                  Operator: "*"
                  type: "BinaryExpr"
              Operator: "+"
              type: "BinaryExpr"
          Operator: "="
          type: "CompareExpr"
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "write"
          locked: False
          type: "Identifier"
      type: "CallExpr"
    {Atomic_AST.AST+Line}
      line: 2
      type: "line"
    {Atomic_AST.AST+CallExpr}
      args: ...
        {Atomic_AST.AST+CompareExpr}
          left: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 6
                  type: "NumericLiteral"
              right: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 6
                  type: "NumericLiteral"
              Operator: "*"
              type: "BinaryExpr"
          right: { }
            {Atomic_AST.AST+NumericLiteral}
              value: 36
              type: "NumericLiteral"
          Operator: "="
          type: "CompareExpr"
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "write"
          locked: False
          type: "Identifier"
      type: "CallExpr"
    {Atomic_AST.AST+Line}
      line: 3
      type: "line"
    {Atomic_AST.AST+CallExpr}
      args: ...
        {Atomic_AST.AST+CompareExpr}
          left: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 6
                  type: "NumericLiteral"
              right: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 7
                  type: "NumericLiteral"
              Operator: "*"
              type: "BinaryExpr"
          right: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 6
                  type: "NumericLiteral"
              right: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 8
                  type: "NumericLiteral"
              Operator: "*"
              type: "BinaryExpr"
          Operator: ">"
          type: "CompareExpr"
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "write"
          locked: False
          type: "Identifier"
      type: "CallExpr"
    {Atomic_AST.AST+Line}
      line: 4
      type: "line"
    {Atomic_AST.AST+CallExpr}
      args: ...
        {Atomic_AST.AST+CompareExpr}
          left: { }
            {Atomic_AST.AST+NumericLiteral}
              value: 81
              type: "NumericLiteral"
          right: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 9
                  type: "NumericLiteral"
              right: { }
                {Atomic_AST.AST+NumericLiteral}
                  value: 10
                  type: "NumericLiteral"
              Operator: "*"
              type: "BinaryExpr"
          Operator: "<"
          type: "CompareExpr"
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "write"
          locked: False
          type: "Identifier"
      type: "CallExpr"
  type: "Program"

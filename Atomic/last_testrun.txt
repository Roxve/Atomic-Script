{Atomic_AST.AST+Program}
  body: ...
    {Atomic_AST.AST+FuncDeclarartion}
      name: "add"
      parameters: ...
        "a"
        "b"
      body: ...
        {Atomic_AST.AST+ReturnStmt}
          value: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "a"
                  locked: False
                  type: "Identifier"
              right: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "b"
                  locked: False
                  type: "Identifier"
              Operator: "+"
              type: "BinaryExpr"
          type: "ReturnStmt"
      type: "FuncDeclarartion"
    {Atomic_AST.AST+FuncDeclarartion}
      name: "multiply"
      parameters: ...
        "a"
        "b"
      body: ...
        {Atomic_AST.AST+ReturnStmt}
          value: { }
            {Atomic_AST.AST+BinaryExpression}
              left: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "a"
                  locked: False
                  type: "Identifier"
              right: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "b"
                  locked: False
                  type: "Identifier"
              Operator: "*"
              type: "BinaryExpr"
          type: "ReturnStmt"
      type: "FuncDeclarartion"
    {Atomic_AST.AST+FuncDeclarartion}
      name: "main"
      parameters: ...
      body: ...
        {Atomic_AST.AST+VarDeclaration}
          Id: "thing"
          value: { }
            {Atomic_AST.AST+Identifier}
              symbol: "add"
              locked: False
              type: "Identifier"
          locked: False
          type: "VarDeclaration"
        {Atomic_AST.AST+VarDeclaration}
          Id: "a"
          value: { }
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+StringLiteral}
                  value: "enter first num: "
                  type: "StringLiteral"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "prompt"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
          locked: False
          type: "VarDeclaration"
        {Atomic_AST.AST+VarDeclaration}
          Id: "b"
          value: { }
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+StringLiteral}
                  value: "enter second num: "
                  type: "StringLiteral"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "prompt"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
          locked: False
          type: "VarDeclaration"
        {Atomic_AST.AST+CallExpr}
          args: ...
            {Atomic_AST.AST+StringLiteral}
              value: "a + b: "
              type: "StringLiteral"
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+Identifier}
                  symbol: "a"
                  locked: False
                  type: "Identifier"
                {Atomic_AST.AST+Identifier}
                  symbol: "b"
                  locked: False
                  type: "Identifier"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "thing"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
          caller: { }
            {Atomic_AST.AST+Identifier}
              symbol: "write"
              locked: False
              type: "Identifier"
          type: "CallExpr"
        {Atomic_AST.AST+AssignmentExpr}
          assigne: { }
            {Atomic_AST.AST+Identifier}
              symbol: "thing"
              locked: False
              type: "Identifier"
          value: { }
            {Atomic_AST.AST+Identifier}
              symbol: "multiply"
              locked: False
              type: "Identifier"
          type: "AssignmentExpr"
        {Atomic_AST.AST+CallExpr}
          args: ...
            {Atomic_AST.AST+StringLiteral}
              value: "a * b: "
              type: "StringLiteral"
            {Atomic_AST.AST+CallExpr}
              args: ...
                {Atomic_AST.AST+Identifier}
                  symbol: "a"
                  locked: False
                  type: "Identifier"
                {Atomic_AST.AST+Identifier}
                  symbol: "b"
                  locked: False
                  type: "Identifier"
              caller: { }
                {Atomic_AST.AST+Identifier}
                  symbol: "thing"
                  locked: False
                  type: "Identifier"
              type: "CallExpr"
          caller: { }
            {Atomic_AST.AST+Identifier}
              symbol: "write"
              locked: False
              type: "Identifier"
          type: "CallExpr"
      type: "FuncDeclarartion"
    {Atomic_AST.AST+CallExpr}
      args: ...
      caller: { }
        {Atomic_AST.AST+Identifier}
          symbol: "main"
          locked: False
          type: "Identifier"
      type: "CallExpr"
  type: "Program"
